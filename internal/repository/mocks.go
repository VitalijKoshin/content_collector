// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/irepository.go

// Package repositories is a generated GoMock package.
package repository

import (
	model "content_collector/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICollectorRepository is a mock of ICollectorRepository interface.
type MockICollectorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICollectorRepositoryMockRecorder
}

// MockICollectorRepositoryMockRecorder is the mock recorder for MockICollectorRepository.
type MockICollectorRepositoryMockRecorder struct {
	mock *MockICollectorRepository
}

// NewMockICollectorRepository creates a new mock instance.
func NewMockICollectorRepository(ctrl *gomock.Controller) *MockICollectorRepository {
	mock := &MockICollectorRepository{ctrl: ctrl}
	mock.recorder = &MockICollectorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectorRepository) EXPECT() *MockICollectorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICollectorRepository) Create(collector *model.CollectorRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", collector)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICollectorRepositoryMockRecorder) Create(collector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICollectorRepository)(nil).Create), collector)
}

// Delete mocks base method.
func (m *MockICollectorRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICollectorRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICollectorRepository)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockICollectorRepository) GetById(id string) (*model.CollectorRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*model.CollectorRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICollectorRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICollectorRepository)(nil).GetById), id)
}

// GetByUrl mocks base method.
func (m *MockICollectorRepository) GetByUrl(url string) (*model.CollectorRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrl", url)
	ret0, _ := ret[0].(*model.CollectorRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUrl indicates an expected call of GetByUrl.
func (mr *MockICollectorRepositoryMockRecorder) GetByUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrl", reflect.TypeOf((*MockICollectorRepository)(nil).GetByUrl), url)
}

// GetForDelete mocks base method.
func (m *MockICollectorRepository) GetForDelete() ([]*model.CollectorRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForDelete")
	ret0, _ := ret[0].([]*model.CollectorRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForDelete indicates an expected call of GetForDelete.
func (mr *MockICollectorRepositoryMockRecorder) GetForDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForDelete", reflect.TypeOf((*MockICollectorRepository)(nil).GetForDelete))
}

// Update mocks base method.
func (m *MockICollectorRepository) Update(collector *model.CollectorRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", collector)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICollectorRepositoryMockRecorder) Update(collector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICollectorRepository)(nil).Update), collector)
}
