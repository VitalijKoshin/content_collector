// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/collector.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICollectorService is a mock of ICollectorService interface.
type MockICollectorService struct {
	ctrl     *gomock.Controller
	recorder *MockICollectorServiceMockRecorder
}

// MockICollectorServiceMockRecorder is the mock recorder for MockICollectorService.
type MockICollectorServiceMockRecorder struct {
	mock *MockICollectorService
}

// NewMockICollectorService creates a new mock instance.
func NewMockICollectorService(ctrl *gomock.Controller) *MockICollectorService {
	mock := &MockICollectorService{ctrl: ctrl}
	mock.recorder = &MockICollectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectorService) EXPECT() *MockICollectorServiceMockRecorder {
	return m.recorder
}

// CheckCollector mocks base method.
func (m *MockICollectorService) CheckCollector() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCollector")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCollector indicates an expected call of CheckCollector.
func (mr *MockICollectorServiceMockRecorder) CheckCollector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCollector", reflect.TypeOf((*MockICollectorService)(nil).CheckCollector))
}

// Close mocks base method.
func (m *MockICollectorService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockICollectorServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockICollectorService)(nil).Close))
}

// Collect mocks base method.
func (m *MockICollectorService) Collect(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockICollectorServiceMockRecorder) Collect(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockICollectorService)(nil).Collect), url)
}

// SetProxy mocks base method.
func (m *MockICollectorService) SetProxy(proxyIp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProxy", proxyIp)
}

// SetProxy indicates an expected call of SetProxy.
func (mr *MockICollectorServiceMockRecorder) SetProxy(proxyIp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProxy", reflect.TypeOf((*MockICollectorService)(nil).SetProxy), proxyIp)
}
